
@section css {
    @Styles.Render("~/Content/Treant/css")
    @Styles.Render("~/Content/css")
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.2/css/bootstrap-select.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>

        .Treant > .node {
        }

        .Treant > p {
            font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
            font-weight: bold;
            font-size: 12px;
        }

        .Treant .collapse-switch {
            width: 100%;
            height: 100%;
            border: none;
            cursor: pointer;
        }

        .Treant .node.collapsed {
            background-color: steelblue;
        }

            .Treant .node.collapsed .collapse-switch {
                background: none;
            }

        .node-name {
            font-weight: bold;
        }

        .nodeExample1 {
            padding: 2px;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
            background-color: #ffffff;
            border: 1px solid #000;
            //width: 200px;
            font-family: Tahoma;
            font-size: 12px;
        }

            .nodeExample1 img {
                margin-right: 10px;
            }

        .gray {
            background-color: #909090;
        }

        .light-gray {
            background-color: #D3D3C7;
        }

        .blue {
            background-color: #A2BDFD;
        }
    </style>

    <style>
        body {
            font-family: Arial;
        }

        /* Style the tab */
        .tab {
            width: 50vw;
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
            object-fit: fill;
        }

            /* Style the buttons inside the tab */
            .tab button {
                background-color: inherit;
                float: left;
                border: none;
                outline: none;
                cursor: pointer;
                padding: 14px 16px;
                transition: 0.3s;
                font-size: 17px;
            }

                /* Change background color of buttons on hover */
                .tab button:hover {
                    background-color: #ddd;
                }

                /* Create an active/current tablink class */
                .tab button.active {
                    background-color: #ccc;
                }

        /* Style the tab content */
        .tabcontent {
            width: 50vw;
            height: 50vh;
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
            object-fit: fill;
        }

        .treeContainer {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .nopadding {
            padding: 0 !important;
            margin: 0 !important;
        }

        #json-input {
            display: block;
            width: 100%;
            height: 200px;
        }

        #json-display {
            border: 1px solid #000;
            margin: 0;
            padding: 10px 20px;
        }

        .list-group {
            max-height: 100px;
            max-width: 200px;
            margin-bottom: 10px;
            overflow: auto;
            -webkit-overflow-scrolling: touch;
        }
    </style>
}

@section scripts {

    @Scripts.Render("~/bundles/treant")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/jsoneditor")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.2/js/bootstrap-select.min.js"></script>
    <script type="text/javascript">
        function getJson() {
            try {
                return JSON.parse($('#json-input').val());
            } catch (ex) {
                //alert('Wrong JSON Format: ' + ex);
                return {};
            }
        }

        var editor = new JsonEditor('#json-display', getJson());
        $('#json-input').bind('input propertychange', function () {
            editor.load(getJson());
        });
    </script>
    <script>
        var propertyRefreshInterval = 2000;
        var trees = {};
        var globalModelCache = {};
        var globalInterfaceCache = {};
        var globalScriptCache = {};
        var simulationUri = "http://localhost:9003/v1/";
        var simulationManagementUri = "https://localhost:44321/api/";
        var authoringUri = "https://digitaltwinsauthoring20190227020728.azurewebsites.net/api/authoringservices/";

        (function ($) {
            $.fn.button = function (action) {
                if (action === 'loading' && this.data('loading-text')) {
                    this.data('original-text', this.html()).html(this.data('loading-text')).prop('disabled', true);
                }
                if (action === 'reset' && this.data('original-text')) {
                    this.html(this.data('original-text')).prop('disabled', false);
                }
            };
        }(jQuery));

        function handleMessage(type, message) {
            switch (type) {
                case "Error":
                    alertClass = "alert-danger";
                    break;
                case "Informational":
                    alertClass = "alert-info";
                    break;
                case "Success":
                    alertClass = "alert-success";
                    break;
                default:
                    alertClass = "alert-dark";
                    break;
            }

            $(".alertContainer").append("<div class=\"alert " + alertClass + " alert-dismissible\"><button class=\"close\" data-dismiss=\"alert\">&times;</button><strong>Note! </strong>" + message + "</div>");
        }
        function openTab(evt, cityName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(cityName + "TabContent").style.display = "block";
            evt.currentTarget.className += " active";
            if (trees[cityName]) {
                trees[cityName].chart.tree.reload();
            }

        }

        function deleteSimulation(evt, simulationId) {
            $(evt.target).button('loading');

            $.ajax({
                type: "DELETE",
                url: simulationManagementUri + $("#Tenant").val() + "/SimulationManager/" + simulationId,
                success: function () {
                    handleMessage("Success", "Deleted : " + simulationId);

                    $("#" + simulationId + "TabContent").remove();
                    $("#" + simulationId + "TabButton").remove();

                    if (trees[simulationId]) {
                        delete trees[simulationId];
                    }

                    $(evt.target).button('reset');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    handleMessage("Error", " Failed to Delete " + simulationId + " : " + thrownError);
                    $(evt.target).button('reset');
                }
            });
        }

        function invokeMethod(evt, modelName, simulationId, methodName, inputSelector) {
            var val = $(inputSelector).val();
            $(evt.target).button('loading');
            var url = $("#ApiEndpoint").val() + '/api/' + $("#Tenant").val() + "/devices/" + modelName + "/invoke/" + methodName;
            if (simulationId) {
                url += "?simulationId=" + simulationId;
            }
            if (!val) {
                val = "{}"
            }
            $.ajax({
                type: "POST",
                url: url,
                accept: "text/plain",
                contentType: "application/json-patch+json",
                data: val,
                success: function (response) {
                    handleMessage("Success", modelName + " " + methodName + " : " + response);
                    $(evt.target).button('reset');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    handleMessage("Error", modelName + " " + methodName + " : " + thrownError);
                    $(evt.target).button('reset');
                }
            });
        }

        function InternalTree(treeJson, container, simulationId) {
            this.modelCache = globalModelCache;
            this.tree = treeJson;
            this.chart = null;
            this.simulationId = simulationId;
            this.methodNames = {};
            this.treantNodes = {}
            this.treantNodes["config"] = {
                container: container,
                hideRootNode: true,
                nodeAlign: "BOTTOM",
                connectors: {
                    type: 'step'
                },
                animateOnInit: false,
                node: {
                    collapsable: true,
                    HTMLclass: 'nodeExample1'
                },
                animation: {
                    nodeAnimation: "easeInSine",
                    nodeSpeed: 700,
                    connectorsAnimation: "<",
                    connectorsSpeed: 700
                }
            };
            this.treantNodes["root"] = {};
        }

        InternalTree.prototype.populateTree = function (buttonRef) {
            var data = [];
            var self = this;
            var interfaces = this.tree.PnPInterfaces;
            for (var interface in interfaces) {
                globalInterfaceCache[interface] = interfaces[interface];
            }

            this.tree.Nodes.forEach(function (treeNode) {
                self.addNode(treeNode);
                data.push(self.processItem(treeNode));
            });

            

            $.when.apply($, data).done(function () {
                console.log("Done");
                console.log(data);
                self.chart = new Treant(Object.values(self.treantNodes), function () { }, $);
                self.startPropertyRefresh();
                if (buttonRef) {
                    buttonRef.button('reset');
                }
            });
        }

        InternalTree.prototype.startPropertyRefresh = function (self) {

            var query = $("#ApiEndpoint").val() + '/api/Query/' + $("#Tenant").val();
            if(!self)
                self = this;

            if (self.simulationId) {
                query += "?simulationId=" + self.simulationId;
            }
            $.ajax({
                type: "Get",
                url: query,
                success: function (data) {
                    var treeNodes = JSON.parse(data);
                    treeNodes.forEach(function (treeNode) {
                        self.refreshProps(treeNode);
                    });
                    setTimeout(self.startPropertyRefresh, propertyRefreshInterval, self);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    handleMessage("Error", "Could not retrieve graph : " + thrownError);
                    setTimeout(self.startPropertyRefresh, propertyRefreshInterval, self);
                }
            });

        } 

        InternalTree.prototype.loadDeviceModel = function (modelId, force = false) {
            var dfd = $.Deferred();
            var self = this;
            if (!force && (modelId in this.modelCache)) {
                dfd.resolve();
            }
            else {
                $.ajax({
                    type: "Get",
                    url: simulationUri + "DeviceModels/" + modelId,
                    success: function (response) {
                        self.modelCache[modelId] = response;
                        dfd.resolve()
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        dfd.resolve()
                    }
                });
            }

            return dfd.promise();
        }

        InternalTree.prototype.addMethodsFromDeviceModel = function (data, model) {
            var methods = new Set();
            for (var item in model.CloudToDeviceMethods) {
                if (!this.methodNames[data.Name].has(item)) {
                    methods.add(item);
                }
            }
            this.addMethodsFromMethodSet(data.Id, data.Name, methods, "SimulationMethods", "btn-secondary");
        }

        InternalTree.prototype.addMethodsFromPnPInterface = function (data, model) {
            for (var item in model.contents) {
                if (model.contents[item]['@@type'] == "Command") {
                    this.methodNames[data.Name].add(model.contents[item]['name']);
                }
            }
            this.addMethodsFromMethodSet(data.Id, data.Name, this.methodNames[data.Name], "Methods");
        }

        InternalTree.prototype.addMethodsFromMethodSet = function (id, name, methods, header, btnClass = "btn-link") {
            if (!methods.size)
                return;
            var self = this;
            var html = "<div class='card' id='" + id + "Card'><div class='card-header nopadding'><button class='btn " + btnClass+"' data-toggle='collapse' data-target='#collapse" + id + header + "' aria-expanded='true' aria-controls='collapseOne' style ='width:100%;'><i class='fa fa-rocket fa-fw'></i>" + header + "</button></div ><ul id = 'collapse" + id + header +"' class='collapse list-group list-group-flush'>";
            methods.forEach(function (item) {
                html += "<li class='list-group-item'><div class='input-group'><div class='input-group-prepend'><span class='input-group-text'>" + item + "</span></div> <input type='textarea' class='form-control' id='" + id + item + "method' placeholder='{}'><div class='input-group-append'><button class='btn btn-outline-secondary' type='button' data-loading-text=\" <i class='fa fa-circle-o-notch fa-spin'></i> Invoking\" onclick = \"invokeMethod(event, '" + name + "', '" + self.simulationId + "', '" + item + "', '#" + id + item + "method')\">Invoke</button></div></div></li>"
            });
            html += "</ul></div>";
            self.treantNodes[name].innerHTML += html
        }

        InternalTree.prototype.processItem = function (treeNode) {
            var dfd = $.Deferred();
            var dfdParent = $.Deferred();
            var promises = [dfdParent];
            var simModelId = null;
            var query = $("#ApiEndpoint").val() + '/api/Query/' + $("#Tenant").val() + '/' + treeNode.Name + '/Parent';
            if (this.simulationId) {
                query += "?simulationId=" + this.simulationId;
                if (treeNode.DeviceId) {
                    simModelId = treeNode.DeviceId.split(".")[1];
                    promises.push(this.loadDeviceModel(simModelId));
                }

            }
            else {
                if (treeNode.Classification == "device") {
                    $("#simModelAssociations")
                        .append("<div class='input-group'><div class='input-group-prepend'><span class='input-group-text'>" + treeNode.Name + "</span></div><select id='test' class='selectpicker modelSelect' data-live-search='true' title='Select Model'></select></div>");
                }

            }

            if (globalInterfaceCache[treeNode.Type]) {
                this.addMethodsFromPnPInterface(treeNode, globalInterfaceCache[treeNode.Type]);
            }
            var self = this;

            $.ajax({
                type: "Get",
                url: query,
                success: function (response) {
                    var parentNode = JSON.parse(response);
                    self.addParent(treeNode, parentNode);
                    dfdParent.resolve()
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    dfdParent.resolve()
                }
            });

            $.ajax({
                type: "Get",
                url: query,
                success: function (response) {
                    var parentNode = JSON.parse(response);
                    self.addParent(treeNode, parentNode);
                    dfdParent.resolve()
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    dfdParent.resolve()
                }
            });

            $.when.apply($, promises).done(function () {

                if (simModelId) {
                    var simModel = self.modelCache[simModelId];
                    self.addMethodsFromDeviceModel(treeNode, simModel);
                }
                dfd.resolve();
            });

            return dfd.promise();
        }

        InternalTree.prototype.getPropsHtml = function (data) {

            html = "";
            var model = globalInterfaceCache[data.Type];

            var desiredProps = new Set();
            var reportedProps = new Set();

            for (var item in model.contents) {
                if (model.contents[item]['@@type'] == "Property") {
                    if (model.contents[item]['writable'] === true) {
                        desiredProps.add(model.contents[item]['name']);
                    }
                    else {
                        reportedProps.add(model.contents[item]['name']);
                    }
                }
            }

            var properties = data.Properties;

            reportedProps.forEach(function (key) {
                var val = "";
                if (properties["$reported"] &&(key in properties["$reported"])) {
                    val = JSON.stringify(properties["$reported"][key]);
                }

                html += "<li class='list-group-item'>" + key + "\t:\t" + val + "</li>";
            });

            desiredProps.forEach(function (key) {
                var val = "";
                if (properties["$desired"]&&(key in properties["$desired"])) {
                    val = JSON.stringify(properties["$desired"][key]);
                }

                html += "<li class='list-group-item list-group-item-secondary'>" + key + "\t:\t" + val + "</li>";
            });

            //if (properties["$reported"]) {
            //    for (var key in properties["$reported"]) {
            //        html += "<li class='list-group-item'>" + key + "\t:\t" + JSON.stringify(properties["$reported"][key]) + "</li>";
            //    }
            //}
            //if (properties["$desired"]) {
            //    for (var key in properties["$desired"]) {
            //        html += "<li class='list-group-item list-group-item-secondary'>" + key + "\t:\t" + JSON.stringify(properties["$desired"][key]) + "</li>";
            //    }
            //}

            return html;
        }
        InternalTree.prototype.refreshProps = function (data) {

            var container = $("#" + data.Id + "Props");
            if (!container.length)
                return;
            container.children().remove();
            var html = this.getPropsHtml(data);
            container.append(html);

            var doc = $(this.treantNodes[data.Name].innerHTML)
            var props = doc.find("#" + data.Id + "Props");
            props.children().remove();
            props.append(html);

            var inner = "";
            doc.each(function (i, d) { inner += d.outerHTML;})

            this.treantNodes[data.Name].innerHTML = inner;
        }
        InternalTree.prototype.addNode = function (data) {
            console.log(JSON.stringify(data));
            var glyph = "";
            if (data.Classification === "device") {
                glyph = "<i class='fa fa-microchip fa-fw'></i>"
            }
            var internal = "<div class='card'><div class='card-header'>" + glyph + data.Name + "</div ><ul id='"+data.Id+"Props' class='list-group list-group-flush'>";
            internal += this.getPropsHtml(data);
            internal += "</ul></div>";
            this.methodNames[data.Name] = new Set()
            this.treantNodes[data.Name] =
                {
                    innerHTML: internal,
                    parent: this.treantNodes["root"],
                    text: { name: data.Name }
                };
        }

        InternalTree.prototype.addParent = function (data, parent) {
            this.treantNodes[data.Name].parent = this.treantNodes[parent.Name];
        }


        function renderSimulation(data) {

            if (!$("#" + data.Id).length) {
                $("#graphNavContent").append("<div class='tabcontent' id='" + data.Id + "TabContent'><p>" + data.Description + "</p><button id='delete+" + data.Id + "' class='btn btn-default deleteSim' type='button' onclick =\"deleteSimulation(event, '" + data.Id + "')\" data-loading-text=\" <i class= 'fa fa-circle-o-notch fa-spin'></i> Deleting Simulation\">Delete</button><div id='" + data.Id + "' class='treeContainer' style='object-fit: cover;'><h3> Loading...</h3></div></div>");
                $("#graphNav").append("<button class='tablinks' id='" + data.Id + "TabButton' onclick = \"openTab(event, '" + data.Id + "')\" >" + data.Name + "</button>")
            }

            fetchGraph(data.Id, data.Id);
        }

        function refreshModelSelects() {
            var appendHtml = "";

            for (modelId in globalModelCache) {
                model = globalModelCache[modelId];
                appendHtml += '<option value="' + modelId + '">' + model.Name + ' Version: ' + model.Version + '</option>';
            }

            $('.selectpicker.modelSelect')
                .find('option')
                .remove()
                .end();

            $('.selectpicker.modelSelect')
                .append(appendHtml)
                .val(Object.keys(globalModelCache)[0])
                .end();

            $('.selectpicker.modelSelect')
                .selectpicker('refresh');
        }

        function fetchGraph(containerId, simulationId) {
            var dfd = $.Deferred();
            var query = $("#ApiEndpoint").val() + '/api/Query/' + $("#Tenant").val() + "?includeInterface=true";
            if (simulationId) {
                query += "&simulationId=" + simulationId;
            }
            $.ajax({
                type: "Get",
                url: query,
                success: function (data) {
                    var tree = new InternalTree(JSON.parse(data), "#" + containerId, simulationId);
                    tree.populateTree();
                    trees[containerId] = tree;
                    dfd.resolve();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    handleMessage("Error", "Could not retrieve graph : " + thrownError);
                    dfd.resolve();
                }
            });
            return dfd.promise();
        }

        $(document).ready(function () {

            $("#startButton").mousedown(function () {
                $(this).button('loading');
                $("#simModelAssociations")
                    .find('.input-group')
                    .remove()
                    .end();
                $("#graphDiv").removeClass("d-none");
                var promises = [];
                promises.push(fetchGraph("tree", null));
                var buttonRef = $(this);
                var simDfd = $.Deferred();
                promises.push(simDfd.promise());
                var scriptDfd = $.Deferred();
                promises.push(scriptDfd.promise());
                var modDfd = $.Deferred();
                promises.push(modDfd.promise());
                $.ajax({
                    type: "Get",
                    url: simulationUri + "Simulations",
                    success: function (simulations) {
                        simulations.Items.forEach(function (data) {
                            if (!data.Enabled)
                                return;
                            promises.push(renderSimulation(data));
                        });
                        simDfd.resolve();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        handleMessage("Error", "Could not retrieve simulations : " + thrownError);
                        simDfd.resolve();
                    }
                });

                $.ajax({
                    type: "Get",
                    url: simulationUri + "DeviceModelScripts",
                    success: function (scripts) {
                        scripts.Items.forEach(function (data) {
                            globalScriptCache[data.Id] = data;
                        });
                        scriptDfd.resolve();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        handleMessage("Error", "Could not retrieve simulations : " + thrownError);
                        scriptDfd.resolve();
                    }
                });

                $.ajax({
                    type: "Get",
                    url: simulationUri + "DeviceModels",
                    success: function (scripts) {
                        scripts.Items.forEach(function (data) {
                            globalModelCache[data.Id] = data;
                        });
                        modDfd.resolve();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        handleMessage("Error", "Could not retrieve simulations : " + thrownError);
                        modDfd.resolve();
                    }
                });

                $.when.apply($, promises).done(function () {
                    refreshModelSelects();
                    $(".metaTab").removeAttr("disabled");
                    buttonRef.button('reset');
                });
            });

            $("#simulateButton").mousedown(function () {
                $(this).button('loading');

                var promises = [];
                var buttonRef = $(this);
                var simDfd = $.Deferred();
                promises.push(simDfd.promise());
                var request = {
                    "name": $("#simName").val(),
                    "description": $("#simDesc").val(),
                    "modelAssosiations": {}
                };

                $('#simModelAssociations').children('.input-group').each(function () {
                    var nodeName = $(this).children(".input-group-prepend").text();
                    var modelId = $(this).find(".selectpicker").val();
                    request.modelAssosiations[nodeName] = modelId;
                });

                $.ajax({
                    type: "POST",
                    url: simulationManagementUri + $("#Tenant").val() + "/SimulationManager",
                    accept: "text/plain",
                    contentType: "application/json-patch+json",
                    data: JSON.stringify(request),
                    success: function (simulationId) {

                        $.ajax({
                            type: "Get",
                            url: simulationUri + "Simulations/" + simulationId,
                            success: function (data) {
                                if (!data.Enabled)
                                    return;
                                promises.push(renderSimulation(data));
                                simDfd.resolve();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                handleMessage("Error", "Could not retrieve simulation " + simulationId + ": " + thrownError);
                                simDfd.resolve();
                            }
                        });
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        handleMessage("Error", "Could not post simulation : " + thrownError);
                        simDfd.resolve();
                    }
                });

                $.when.apply($, promises).done(function () {
                    buttonRef.button('reset');
                });
            });

            $("#authoringButton").mousedown(function () {
                $(this).button('loading');

                var promises = [];
                var buttonRef = $(this);
                var simDfd = $.Deferred();
                promises.push(simDfd.promise());
                var request = $("#json-input").val();

                $.ajax({
                    type: "POST",
                    url: authoringUri + $("#Tenant").val() + "/SimulationManager",
                    accept: "text/plain",
                    contentType: "application/json-patch+json",
                    data: JSON.stringify(request),
                    success: function (simulationId) {

                        $.ajax({
                            type: "Get",
                            url: simulationUri + "Simulations/" + simulationId,
                            success: function (data) {
                                if (!data.Enabled)
                                    return;
                                promises.push(renderSimulation(data));
                                simDfd.resolve();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                handleMessage("Error", "Could not retrieve simulation " + simulationId + ": " + thrownError);
                                simDfd.resolve();
                            }
                        });
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        handleMessage("Error", "Could not post simulation : " + thrownError);
                        simDfd.resolve();
                    }
                });

                $.when.apply($, promises).done(function () {
                    buttonRef.button('reset');
                });
            });
        });
    </script>
}

<div class="jumbotron">
    <h2>Digital Twins Visualizer</h2>
</div>
<div class="container-fluid">
    <h2>Enter IotHub message/events Information</h2>
    <div class="row" style="padding-top:0.5em;">
        <div class="col-xs-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <div class="input-group">
                        <input type="text" id="ApiEndpoint" class="form-control" placeholder="Dynamic API Endpoint" aria-label="Dynamic API Endpoint" aria-describedby="basic-addon2" value="https://digitaltwinsdynamicapi.azurewebsites.net">
                        <input type="text" id="Tenant" class="form-control" placeholder="Tenant Name" aria-label="Tenant Name" aria-describedby="basic-addon2" value="filipst">
                        <span class="input-group-btn">
                            <button id="startButton" class="btn btn-default" type="button" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Loading Tree">Display</button>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="padding-top:0.5em;">
        <div class="alertContainer col-xs-12">
        </div>
    </div>
    <div class="row" style="padding-top:0.5em;">
        <div id="graphDiv" class="col-xs-12 d-none">
            <div id="graphNav" class="tab col-xs-12">
                <button id="authoringTab" class="tablinks metaTab" onclick="openTab(event, 'authoring')" disabled>Authoring</button>
                <button id="newSimTab" class="tablinks metaTab" onclick="openTab(event, 'newSim')" disabled>New Simulation</button>
                <button class="tablinks active" onclick="openTab(event, 'tree')">DigitalTwin</button>
            </div>
            <div id="graphNavContent" class="col-xs-12 clearfix">
                <div id="authoringTabContent" class="tabcontent" style="object-fit: cover;">
                    <button id="authorButton" class="btn" type="button" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Authoring">Author</button>
                    <div class="form-group">
                        <label for="authoringModelName">Model Name:</label>
                        <input type="text" class="form-control" id="authoringModelName">
                    </div>
                    <div class="form-group">
                        <textarea id="json-input" autocomplete="off">
         {
    "definitions": {},
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://example.com/root.json",
    "type": "object",
    "title": "The Root Schema",
    "required": [
      "Name",
      "type",
      "parentName",
      "InterfaceName",
      "properties",
      "Floors"
    ],
    "properties": {
      "Name": {
        "$id": "#/properties/Name",
        "type": "string",
        "title": "The Name Schema",
        "default": "",
        "examples": [
          "Building"
        ],
        "pattern": "^(.*)$"
      },
      "type": {
        "$id": "#/properties/type",
        "type": "string",
        "title": "The Type Schema",
        "default": "",
        "examples": [
          ""
        ],
        "pattern": "^(.*)$"
      },
      "parentName": {
        "$id": "#/properties/parentName",
        "type": "string",
        "title": "The Parentname Schema",
        "default": "",
        "examples": [
          ""
        ],
        "pattern": "^(.*)$"
      },
      "InterfaceName": {
        "$id": "#/properties/InterfaceName",
        "type": "string",
        "title": "The Interfacename Schema",
        "default": "",
        "examples": [
          ""
        ],
        "pattern": "^(.*)$"
      },
      "properties": {
        "$id": "#/properties/properties",
        "type": "object",
        "title": "The Properties Schema"
      },
      "Floors": {
        "$id": "#/properties/Floors",
        "type": "array",
        "title": "The Floors Schema",
        "items": {
          "$id": "#/properties/Floors/items",
          "type": "object",
          "title": "The Items Schema",
          "required": [
            "name",
            "parentName",
            "InterfaceName",
            "properties"
            ],
          "properties": {
            "name": {
              "$id": "#/properties/Floors/items/properties/name",
              "type": "string",
              "title": "The Name Schema",
              "default": "",
              "examples": [
                "Floor"
              ],
              "pattern": "^(.*)$"
            },
            "parentName": {
              "$id": "#/properties/Floors/items/properties/parentName",
              "type": "string",
              "title": "The Parentname Schema",
              "default": "",
              "examples": [
                ""
              ],
              "pattern": "^(.*)$"
            },
            "InterfaceName": {
              "$id": "#/properties/Floors/items/properties/InterfaceName",
              "type": "string",
              "title": "The Interfacename Schema",
              "default": "",
              "examples": [
                ""
              ],
              "pattern": "^(.*)$"
            },
            "properties": {
              "$id": "#/properties/Floors/items/properties/properties",
              "type": "object",
              "title": "The Properties Schema",
              "required": [
                "IsOccupied"
              ],
              "properties": {
                "IsOccupied": {
                  "$id": "#/properties/Floors/items/properties/properties/properties/IsOccupied",
                  "type": "boolean",
                  "title": "The Isoccupied Schema",
                  "default": false,
                  "examples": [
                    false
                  ]
                }
              }
            },
            "Room": {
              "$id": "#/properties/Floors/items/properties/Room",
              "type": "array",
              "title": "The Room Schema",
              "items": {
                "$id": "#/properties/Floors/items/properties/Room/items",
                "type": "object",
                "title": "The Items Schema",
                "required": [
                  "name",
                  "parentName",
                  "InterfaceName",
                  "properties"
                ],
                "properties": {
                  "name": {
                    "$id": "#/properties/Floors/items/properties/Room/items/properties/name",
                    "type": "string",
                    "title": "The Name Schema",
                    "default": "",
                    "examples": [
                      "Room"
                    ],
                    "pattern": "^(.*)$"
                  },
                  "parentName": {
                    "$id": "#/properties/Floors/items/properties/Room/items/properties/parentName",
                    "type": "string",
                    "title": "The Parentname Schema",
                    "default": "",
                    "examples": [
                      ""
                    ],
                    "pattern": "^(.*)$"
                  },
                  "InterfaceName": {
                    "$id": "#/properties/Floors/items/properties/Room/items/properties/InterfaceName",
                    "type": "string",
                    "title": "The Interfacename Schema",
                    "default": "",
                    "examples": [
                      ""
                    ],
                    "pattern": "^(.*)$"
                  },
                  "properties": {
                    "$id": "#/properties/Floors/items/properties/Room/items/properties/properties",
                    "type": "object",
                    "title": "The Properties Schema",
                    "required": [
                      "IsOccupied"
                    ],
                    "properties": {
                      "IsOccupied": {
                        "$id": "#/properties/Floors/items/properties/Room/items/properties/properties/properties/IsOccupied",
                        "type": "boolean",
                        "title": "The Isoccupied Schema",
                        "default": false,
                        "examples": [
                          false
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

        
    </textarea>
                        <pre id="json-display"></pre>
                        </div>
                    </div>
                    <div id="newSimTabContent" class="tabcontent" style="object-fit: cover;">
                        <div class="form-group">
                            <label for="simName">Simulation Name:</label>
                            <input type="text" class="form-control" id="simName">
                        </div>
                        <div class="form-group">
                            <label for="simDesc">Simulation Description:</label>
                            <input type="text" class="form-control" id="simDesc">
                        </div>
                        <div class="form-group">
                            <h4>Model Associations</h4>
                            <div id="simModelAssociations">

                            </div>
                        </div>
                        <button id="simulateButton" class="btn btn-default" type="button" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Creating Simulation">Simulate</button>
                    </div>
                    <div id="treeTabContent" class="tabcontent" style="object-fit: cover;overflow: auto;display: block;">
                        <div id="tree" class="treeContainer">
                            <h3> Loading...</h3>
                        </div>
                    </div>
                </div>
        </div>
    </div>
</div>
