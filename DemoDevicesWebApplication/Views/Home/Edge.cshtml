
@section scripts {
    @Scripts.Render("~/bundles/plotly")
    <script>
        function Queue(maxSize) {
            this.array = [];
            this.max = maxSize;
        }

        Queue.prototype.enqueue = function (data) {
            while (this.count() >= this.max) {
                this.dequeue();
            }
            this.array.push(data);
        };

        Queue.prototype.dequeue = function () {
            if (this.isEmpty())
                return null;
            return this.array.shift();
        };

        Queue.prototype.head = function () {
            if (this.isEmpty())
                return null;
            return this.array[0];
        };

        Queue.prototype.isEmpty = function () {
            return this.array.length === 0;
        };

        Queue.prototype.peek = function () {
            if (this.isEmpty())
                return null;
            return this.array[this.array.length - 1];
        };

        Queue.prototype.count = function () {
            return this.array.length;
        };

        $(document).ready(function () {

             $("#startButton").mousedown(function () {
            $.ajax({
                type: "POST",
                data: { "connectionString": $("#connectionString").val(), "hubName": $("#deviceId").val() },
                url: '@Url.Action("Initialize", "Edge")',
                success: displayDevice,
       error: function(xhr, ajaxOptions, thrownError) {
           alert(xhr.status);
           alert(thrownError);
          }
        });
            });

        function displayDevice() {
            }

            $("#stopButton").mousedown(uninitialize);

        function uninitialize() {
             $.ajax({
                type: "POST",
                url: '@Url.Action("Uninitialize", "Edge")',
                success: reset,
                 error: alertError
   });
            }
                    window.addEventListener("beforeunload", function (event) {
                        uninitialize();
            });

            function alertError(xhr, ajaxOptions, thrownError) {
                alert(xhr.status);
                alert(thrownError);
            }

            function reset() {
            }

               function messageRefresh() {
   $.ajax({
       type: "Get",
       data: { "count": 20},
       url: '@Url.Action("Messages", "Edge")',
       success: processMessages,
       error: function (xhr, ajaxOptions, thrownError) {
           setTimeout(messageRefresh, messageReadInterval);
           alert(xhr.status);
           alert(thrownError);
       }
       });
            }

   function processMessages(data) {
       setTimeout(messageRefresh, messageReadInterval);
       if (!data)
           return;
       data.forEach(processMessage);
            }

            function processMessage(data) {
                var obj = JSON.parse(data.Value);

                if (!deviceData[data.Key]) {
                    deviceData[data.Key] = {
                        machine: {
                            x: new Queue(50),
                            y: new Queue(50),
                            z: new Queue(50),
                        },
                        ambient: {
                            x: new Queue(50),
                            y: new Queue(50),
                            z: new Queue(50),
                        },
                        color: new Queue(50)
                    };
                }
                var point = deviceData[data.Key];
                point.machine.x.enqueue(obj.timeCreated);
                point.machine.y.enqueue(obj.machine.temperature);
                point.machine.z.enqueue(obj.machine.pressure);

                point.ambient.x.enqueue(obj.timeCreated);
                point.ambient.y.enqueue(obj.ambient.temperature);
                point.ambient.z.enqueue(obj.ambient.humidity);

                if (!obj.hasOwnProperty('anomaly')) {
                    point.color.enqueue("#00188f");
                }
                else if (obj.anomaly) {
                    point.color.enqueue("#e81123");
                }
                else {
                    point.color.enqueue("#008272");
                }

                var plotMachineTemperatureData = [];
                var plotAmbientTemperatureData = [];

                var plotMachinePressureData = [];
                var plotAmbientHumidityData = [];

                for (var key in deviceData) {
                    var current = deviceData[key];
                    plotMachineTemperatureData.push(
                        {
                            type: 'scatter',
                            mode: 'lines+markers',
                            name: key,
                            x: current.machine.x.array,
                            y: current.machine.y.array,
                            marker: {
                                size: 9,
                                color: current.color.array
                            },
                            line: {
                                color:'#0078d4'
                            }
                        }
                    );

                    plotAmbientTemperatureData.push(
                        {
                            type: 'scatter',
                            mode: 'lines+markers',
                            name: key,
                            x: current.ambient.x.array,
                            y: current.ambient.y.array,
                            marker: {
                                size: 9,
                                color: current.color.array
                            },
                            line: {
                                color: '#5c005c'
                            }
                        }
                    );

                    plotMachinePressureData.push(
                        {
                            type: 'scatter',
                            mode: 'lines+markers',
                            name: key,
                            x: current.machine.x.array,
                            y: current.machine.z.array,
                            marker: {
                                size: 9,
                                color: current.color.array
                            },
                            line: {
                                color: '#0078d4'
                            }
                        }
                    );

                    plotAmbientHumidityData.push(
                        {
                            type: 'scatter',
                            mode: 'lines+markers',
                            name: key,
                            x: current.ambient.x.array,
                            y: current.ambient.z.array,
                            marker: {
                                size: 9,
                                color: current.color.array
                            },
                            line: {
                                color: '#5c005c'
                            }
                        }
                    );
                }

                Plotly.newPlot(document.getElementById('machineTemperature'), plotMachineTemperatureData, {
                        title: 'Machine Temperature',
                        showlegend : true
                });

                Plotly.newPlot(document.getElementById('ambientTemperature'), plotAmbientTemperatureData, {
                    title: 'Ambient Temperature',
                    showlegend: true
                });

                Plotly.newPlot(document.getElementById('machinePressure'), plotMachinePressureData, {
                    title: 'Machine Pressure',
                    showlegend: true
                });

                Plotly.newPlot(document.getElementById('ambientHumidity'), plotAmbientHumidityData, {
                    title: 'Ambient Humidity',
                    showlegend: true
                });
            }

            var messageReadInterval = 1000;
            messageRefresh();

            var deviceData = {};
            var dataQueuex = new Queue();
            var dataQueuey = new Queue();

        });

    </script>
}

<div class="jumbotron">
    <h2>IoT Edge Telemetry Visualizer</h2>
</div>
<div class="container-fluid">
    <h2>Enter IotHub message/events Information</h2>
    <div class="row" style="padding-top:0.5em;">
        <div class="col-xs-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <div class="input-group">
                        <input type="text" id="connectionString" class="form-control" placeholder="EventHub connection String" aria-label="EventHub connection Stringg" aria-describedby="basic-addon2">
                        <input type="text" id="deviceId" class="form-control" placeholder="IoTHub Name" aria-label="IoTHub Name" aria-describedby="basic-addon2">
                        <span class="input-group-btn">
                            <button id="startButton" class="btn btn-default" type="button">Start Reading</button>
                        </span>
                        <span class="input-group-btn">
                            <button id="stopButton" class="btn btn-default" type="button">Stop Reading</button>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="padding-top:0.5em;">
        <div class="col-xs-6">
            <div id="machineTemperature" style="object-fit: cover;"></div>
        </div>
        <div class="col-xs-6">
            <div id="machinePressure" style="object-fit: cover;"></div>
        </div>
    </div>
    <div class="row" style="padding-top:0.5em;">
        <div class="col-xs-6">
            <div id="ambientTemperature" style="object-fit: cover;"></div>
        </div>
        <div class="col-xs-6">
            <div id="ambientHumidity" style="object-fit: cover;"></div>
        </div>
    </div>
</div>
